version: 2.1

# Define the orbs we'll use
orbs:
  gh: circleci/github-cli@2.2
  terraform: circleci/terraform@3.6
  aws-cli: circleci/aws-cli@5.4.0
  go: circleci/go@3.0.2


# Define pipeline parameters for API configuration
parameters:
  template_repo:
    type: string
    default: ""  # Must be provided via API
    description: "Name of the template repository to use (e.g. python-starter-template, java-starter-template)"
  target_repo:
    type: string
    default: ""  # Must be provided via API
    description: "Name of the new repository to create (will be created in CCI-Labs org)"
  #because we use an AWS S3 bucket for TF State, we will use OIDC to get access to predefined IAM policy
  aws-account-id:
    type: string
    default: "992382483259"
  aws-pipeline-iam-prefix:
    #used by pipeline as role, used by tf as role and policy name
    type: string
    default: circleci-labs-pipeline
  github_target_org:
    type: string
    default: CircleCI-Labs
  circleci_target_org_id:
    type: string
    default: "41ced616-61aa-47b8-9bf9-b8ed52d0468a"
  circleci_target_org_slug:
    type: string
    default: "circleci/98KhFjn8YyZY9qoBGmzCBs"
  destroy_project:
    type: boolean
    default: false


jobs:
  configure-cci:
    docker:
      - image: cimg/deploy:2025.01.1
    environment:
      WEBHOOK_BODY: << pipeline.trigger_parameters.webhook.body >>
    steps:
      - checkout
      - gh/install
      - gh/setup
      - parse-webhook-payload
      - setup-tf-vars-create
      - run:
          name: Generate backend config
          command: |
            echo "key=\"fe-platform-demo/port/${TARGET_REPO}.tfstate\"" > terraform/pipeline-terraform/backend.conf
      - terraform/apply:
          backend_config_file: backend.conf
          path: terraform/pipeline-terraform
          var_file: app.tfvars

  destroy-cci-and-repo:
    docker:
      - image: cimg/deploy:2025.01.1
    steps:
      - checkout
      - setup-tf-vars-destroy
      - run:
          name: Generate backend config
          command: |
            echo "key=\"fe-platform-demo/port/${TARGET_REPO}.tfstate\"" > terraform/pipeline-terraform/backend.conf
      - terraform/destroy:
          backend_config_file: backend.conf
          path: terraform/pipeline-terraform
          var_file: app.tfvars
      - gh/install
      - gh/setup
      - run:
          name: Delete GH repo 
          command: |
            gh repo delete <<pipeline.parameters.github_target_org>>/<< pipeline.parameters.target_repo >> \
            --confirm
            
workflows:
  clone-and-create:
    when: not pipeline.parameters.destroy_project
    jobs:
      - configure-cci:
          context: 
            - centralized-assest-github-envs
  destroy_project: 
    when: pipeline.parameters.target_repo != "" and pipeline.parameters.template_repo != "" and pipeline.parameters.destroy_project
    jobs:
      - destroy-cci-and-repo:
          context: 
            - centralized-assest-github-envs

               
commands:
  build-terraform-provider-circleci:
    steps:
      - run:
          name: Clone Terraform Provider Repo and Write Commit SHA
          command: |
            export PROVIDER_VERSION="0.0.1"
            export PROVIDER_PATH="$HOME/.terraform.d/plugins/circleci.com/circleci/circleci/${PROVIDER_VERSION}/linux_amd64"
            mkdir -p "$PROVIDER_PATH"
            git clone --depth 1 https://github.com/CircleCI-Public/terraform-provider-circleci.git /tmp/terraform-provider-circleci
            cd /tmp/terraform-provider-circleci
            git rev-parse HEAD > /tmp/terraform-provider-circleci.txt
      - restore_cache:
          keys:
            - terraform-provider-circleci-{{ checksum "/tmp/terraform-provider-circleci.txt" }}
      - go/install:
          version: "1.22.3"
      - run:
          name: Use cached provider if available, else build
          command: |
            export PROVIDER_VERSION="0.0.1"
            export PROVIDER_PATH="$HOME/.terraform.d/plugins/circleci.com/circleci/circleci/${PROVIDER_VERSION}/linux_amd64"
            if [ -f "$PROVIDER_PATH/terraform-provider-circleci" ]; then
              echo "Provider binary found in cache, skipping build."
            else
              echo "Provider binary not found, building..."
              cd /tmp/terraform-provider-circleci
              go build -o terraform-provider-circleci
              cp terraform-provider-circleci "$PROVIDER_PATH/"
              echo "Provider built and copied to $PROVIDER_PATH"
            fi
      - save_cache:
          key: terraform-provider-circleci-{{ checksum "/tmp/terraform-provider-circleci.txt" }}
          paths:
            - ~/.terraform.d/plugins/circleci.com/circleci/circleci/0.0.1/linux_amd64
  setup-tf-vars-create:
    steps:
      - build-terraform-provider-circleci
      - restore_cache:
          keys:
            - terraform-providers-v1-{{ checksum "terraform/pipeline-terraform/providers.tf" }}
            - terraform-providers-v1-
      - run:
          name: Setup app specific variables from Port
          command: |
            # No longer need to fetch repo IDs via GitHub API - Terraform handles this
            export APP_NAME=${TARGET_REPO}
            export TEMPLATE=${TEMPLATE_REPO}
            export ORG_ID=<< pipeline.parameters.circleci_target_org_id >>
            export ORG_SLUG=<< pipeline.parameters.circleci_target_org_slug >>
            export DEPLOYER_SECRET='pulledfromvault'
            export TEMPLATE_OWNER=<< pipeline.parameters.github_target_org >>
            echo "APP_NAME: $APP_NAME"
            echo "TEMPLATE: $TEMPLATE"
            echo "ORG_ID: $ORG_ID"
            echo "ORG_SLUG: $ORG_SLUG"
            echo "DEPLOYER_SECRET: $DEPLOYER_SECRET"
            echo "TEMPLATE_OWNER: $TEMPLATE_OWNER"
            circleci env subst < .circleci/terraform_provider/app.tfvars > terraform/pipeline-terraform/app.tfvars
      - aws-cli/setup:
          role_arn: "arn:aws:iam::<<pipeline.parameters.aws-account-id>>:role/<<pipeline.parameters.aws-pipeline-iam-prefix>>-role"
          role_session_name: "fe-provider-demo-<< pipeline.number >>"
      - save_cache:
          key: terraform-providers-v1-{{ checksum "terraform/pipeline-terraform/providers.tf" }}
          paths:
            - terraform/pipeline-terraform/.terraform
  setup-tf-vars-destroy:
    steps:
      - build-terraform-provider-circleci
      - restore_cache:
          keys:
            - terraform-providers-v1-{{ checksum "terraform/pipeline-terraform/providers.tf" }}
            - terraform-providers-v1-
      - run:
          name: Setup app specific variables from Port
          command: |
            # No longer need to fetch repo IDs via GitHub API - Terraform handles this
            export APP_NAME=<< pipeline.parameters.target_repo >>
            export TEMPLATE=<< pipeline.parameters.template_repo >>
            export ORG_ID=<< pipeline.parameters.circleci_target_org_id >>
            export ORG_SLUG=<< pipeline.parameters.circleci_target_org_slug >>
            export DEPLOYER_SECRET='pulledfromvault'
            export TEMPLATE_OWNER=<< pipeline.parameters.github_target_org >>
            echo "APP_NAME: $APP_NAME"
            echo "TEMPLATE: $TEMPLATE"
            echo "ORG_ID: $ORG_ID"
            echo "ORG_SLUG: $ORG_SLUG"
            echo "DEPLOYER_SECRET: $DEPLOYER_SECRET"
            echo "TEMPLATE_OWNER: $TEMPLATE_OWNER"
            circleci env subst < .circleci/terraform_provider/app.tfvars > terraform/pipeline-terraform/app.tfvars
      - aws-cli/setup:
          role_arn: "arn:aws:iam::<<pipeline.parameters.aws-account-id>>:role/<<pipeline.parameters.aws-pipeline-iam-prefix>>-role"
          role_session_name: "fe-provider-demo-<< pipeline.number >>"
      - save_cache:
          key: terraform-providers-v1-{{ checksum "terraform/pipeline-terraform/providers.tf" }}
          paths:
            - terraform/pipeline-terraform/.terraform
  parse-webhook-payload:
    steps:
      - run:
          name: Parse webhook JSON body and export as env vars
          command: |
            echo "Webhook JSON body:" 
            echo "--------------------------------"
            echo "${WEBHOOK_BODY}"
            echo "--------------------------------"
            echo "${WEBHOOK_BODY}" | jq -r 'to_entries | .[] | "export \(.key | ascii_upcase)=\(.value)"' >> $BASH_ENV
            source $BASH_ENV
